package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"strconv"

	"github.com/tvandoren88/parkHub/graph/model"
	"github.com/tvandoren88/parkHub/internal/flightNames"
	"github.com/tvandoren88/parkHub/internal/flights"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// CreateFlight is the resolver for the createFlight field.
func (r *mutationResolver) CreateFlight(ctx context.Context, input model.NewFlight) (*model.Flight, error) {
	var flight flights.Flight
	flight.Name = input.Name
	flight.DepartureTime = input.DepartureTime
	flight.ArrivalTime = input.ArrivalTime
	flightID := flight.Save()

	var flightName model.NewFlightName
	flightName.FlightID = strconv.FormatInt(flightID, 10)
	flightName.Name = input.Name
	r.CreateFlightName(ctx, flightName)

	return &model.Flight{ID: strconv.FormatInt(flightID, 10), Name: flight.Name, DepartureTime: flight.DepartureTime, ArrivalTime: flight.ArrivalTime}, nil
}

// CreateFlightName is the resolver for the createFlightName field.
func (r *mutationResolver) CreateFlightName(ctx context.Context, input model.NewFlightName) (*model.FlightName, error) {
	var name flightNames.FlightName
	name.Name = input.Name
	name.FlightID = input.FlightID
	nameID := name.Save()
	return &model.FlightName{ID: strconv.FormatInt(nameID, 10), Name: name.Name, FlightID: name.FlightID}, nil
}

// UpdateFlight is the resolver for the updateFlight field.
func (r *mutationResolver) UpdateFlight(ctx context.Context, id string, edits model.EditFlight) (*model.Flight, error) {
	intId, _ := strconv.Atoi(id)
	flight := flights.GetByID(intId)
	if edits.Name != nil {
		flight.Name = *edits.Name
		var newName model.NewFlightName
		newName.Name = *edits.Name
		newName.FlightID = id
		r.CreateFlightName(ctx, newName)
	}
	if edits.DepartureTime != nil {
		flight.DepartureTime = *edits.DepartureTime
	}
	if edits.ArrivalTime != nil {
		flight.ArrivalTime = *edits.ArrivalTime
	}
	updatedID := flight.Update()
	return &model.Flight{ID: strconv.FormatInt(updatedID, 10), Name: flight.Name, DepartureTime: flight.DepartureTime, ArrivalTime: flight.ArrivalTime}, nil
}

// GetFlightDetails is the resolver for the getFlightDetails field.
func (r *mutationResolver) GetFlightDetails(ctx context.Context, findName string) (*model.Flight, error) {
	flightName := flightNames.GetByFlightName(findName)
	if flightName != nil {
		id, _ := strconv.Atoi(flightName.FlightID)
		flight := flights.GetByID(id)
		return &model.Flight{ID: flight.ID, Name: flight.Name, DepartureTime: flight.DepartureTime, ArrivalTime: flight.ArrivalTime}, nil

	}
	return nil, gqlerror.Errorf("Flight Not Found")
}

// InsertFlights is the resolver for the insertFlights field.
func (r *mutationResolver) InsertFlights(ctx context.Context, objects []*model.NewFlight) ([]*model.Flight, error) {
	var results []*model.Flight
	for _, input := range objects {
		newFLight, _ := r.CreateFlight(ctx, *input)
		results = append(results, newFLight)
	}
	return results, nil
}

// Flights is the resolver for the flights field.
func (r *queryResolver) Flights(ctx context.Context) ([]*model.Flight, error) {
	var resFlights []*model.Flight
	var dbFlights []flights.Flight = flights.GetAll()
	for _, flight := range dbFlights {
		resFlights = append(resFlights, &model.Flight{ID: flight.ID, Name: flight.Name, DepartureTime: flight.DepartureTime, ArrivalTime: flight.ArrivalTime})
	}
	return resFlights, nil
}

// FlightNames is the resolver for the flightNames field.
func (r *queryResolver) FlightNames(ctx context.Context) ([]*model.FlightName, error) {
	var resNames []*model.FlightName
	var dbNames []flightNames.FlightName = flightNames.GetAll()
	for _, name := range dbNames {
		resNames = append(resNames, &model.FlightName{ID: name.ID, FlightID: name.FlightID, Name: name.Name})
	}
	return resNames, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
